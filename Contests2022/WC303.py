import time
from itertools import product
from typing import Optional, List

from helpers import print_assert, print_assert_stream
from bisect import bisect_left, bisect_right
import heapq
from collections import Counter, defaultdict
null = None

class Solution:
    def repeatedCharacter(self, s: str) -> str:
        appearances = set([])
        for c in s:
            if c in appearances:
                return c
            appearances.add(c)

    def test1(self):
        print_assert(self.repeatedCharacter("abccbaacz"), 'c')
        print_assert(self.repeatedCharacter("abcdd"), 'd')

    def equalPairs(self, grid: List[List[int]]) -> int:
        cols = defaultdict(int)
        n = len(grid)
        for j in range(n):
            col_j = tuple([grid[i][j] for i in range(n)])
            cols[col_j] += 1
        tot = 0
        for row in grid:
            tot += cols.get(tuple(row), 0)
        return tot

    def test2(self):
        print_assert(self.equalPairs([[3,2,1],[1,7,6],[2,7,7]]), 1)
        print_assert(self.equalPairs([[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]), 3)

    def test3(self):
        fr = FoodRatings(["kimchi", "miso", "sushi", "moussaka", "ramen", "bulgogi"], ["korean", "japanese", "japanese", "greek", "japanese", "korean"], [9, 12, 8, 15, 14, 7])
        print_assert_stream(fr,
                ["FoodRatings", "highestRated", "highestRated", "changeRating", "highestRated", "changeRating", "highestRated", "changeRating", "highestRated"],
                [null, ["korean"], ["japanese"], ["sushi", 16], ["japanese"], ["ramen", 16], ["japanese"], ["ramen", 2], ["japanese"]],
                [null, "kimchi", "ramen", null, "sushi", null, "ramen", null, "sushi"]
        )
        # fr = FoodRatings()
        # print_assert_stream(
        #     ["FoodRatings", "changeRating", "highestRated", "changeRating", "changeRating", "changeRating",
        #      "highestRated", "highestRated"]
        #     [[["emgqdbo", "jmvfxjohq", "qnvseohnoe", "yhptazyko", "ocqmvmwjq"],
        #       ["snaxol", "snaxol", "snaxol", "fajbervsj", "fajbervsj"], [2, 6, 18, 6, 5]], ["qnvseohnoe", 11], [
        #          "fajbervsj"], ["emgqdbo", 3], ["jmvfxjohq", 9], ["emgqdbo", 14], ["fajbervsj"], ["snaxol"]]
        # )

    def countExcellentPairs(self, nums: List[int], k: int) -> int:
        def count_set_bits(n):
            # https://www.geeksforgeeks.org/count-set-bits-in-an-integer/
            # base case
            if (n == 0):
                return 0
            else:
                return 1 + count_set_bits(n & (n - 1))

        def check_excellence(a, b):
            set_bits = count_set_bits(a&b) + count_set_bits(a|b)
            if set_bits >= k:
                return 2 if a != b else 1
            else:
                return 0

        count = 0
        distinct_nums = list(set(nums))
        for i in range(len(distinct_nums)):
            for j in range(i, len(distinct_nums)):
                count += check_excellence(distinct_nums[i], distinct_nums[j])
        return count

    def test4(self):
        print_assert(self.countExcellentPairs([1,2,3,1], 3), 5)
        print_assert(self.countExcellentPairs([5,1,1], 10), 0)
        print_assert(self.countExcellentPairs([546964036,774932035,124082531,872371097,449829799,359690913,946571097,784435080,538564425,704204678,16086050,331754814,406135590,310354138,352473458,946500857,770226690,681075185,848257132,550266852,279258684,827919325,802312357,504811548,926985097,906588007,487185677,156803787,304357650,156053855,266429798,552724573,946855647,768089641,712700365,56823190,437609312,769582020,246311855,677031824,712457568,753663241,679007558,184286483,491390838,721699313,498342108,139146114,245581511,336039142,214757718,782638268,155600645,641912792,461394590,470731942,987406404,462552801,656606940,102827181,206857816,668880888,644427987,894842251,382871418,801896167,500934633,206243166,26356855,6498548,189258811,525891319,817437904,765437111,481534584,513748589,339564199,399500057,460191234,281305098,631183990,409145173,730707668,814352259,536242376,857406007,318765878,294559371,369058827,79380381,446753358,452002721,885618597,604448435,872277716,388450956,136602274,211618214,862626667,544107635,561287090,674549213,419647638,994754711,758847233,635525778,439652261,669262587,230545123,450170631,418250322,610968854,252695108,242649517,140209733,938072143,679712309,353825757,477965850,227720170,487523608,234985627,129643956,554893867,860703163,308276639,874292045,318479712,834691588,213615437,33504019,452932235,485545289,385418047,875228392,978352653,841509430,242380079,227613680,178278018,705807496,354268158,487897660,819642386,65744508,485933464,117885280,367631566,6432747,45923152,767442404,912267546,920705074,5656057,88704754,285255450,61312605,692003135,468085764,630355336,165934690,132238028,729085476,43461382,17932674,592994203,948982165,666435927,861130573,641086476,191218801,918116700,867861275,801255849,330800113,394436704,309804939,592543313,927542804,31543734,501383843,564721762,230215116,792868006,719957533,450067011,200001475,173188393,920420713,693869933,822678517,822837930,327486306,172936763,474182370,657240348,477109254,157030250,457205967,85102780,934965444,710008946,987557893,862791745,844047778,977004943,492266113,693509341,275692203,798705486,446937573,834186252,79416212,186187888,763596606,554081734,441344087,401457619,814152481,143749353,79415964,315100879,575893555,992343245,730882890,339835081,817732776,279513563,808047305,321005271,920592980,335654453,572880157,96226642,420214590,558814330,872543545,480761660,358143068,59537351,551319745,390115488,812604148,929126941,323010620,319849749,503518618,212552747,855766132,823845332,593680359,339155218,403867769,489730483,721843599,203498601,389076822,788070564,195457752,819015604,844274320,716492815,430792208,326285357,269654373,965503770,330924748,185929938,795245962,813766795,345235280,510295801,533346880,674481248,543136294,943051893,760231007,896760479,823349796,140216595,486832022,14031721,252935361,454483789,747289326,303667079,592781662,212016282,42323242,528829021,832657210,991787254,689261199,670288217,188285491,392577743,567925548,27178535,93525736,389017548,805263182,376545597,110206682,483320652,245964515,375366200,317163179,2606100,909127169,700365346,439564656,531065195,944001684,319856576,946609701,721340741,317111939,74851720,560370856,775756121,648426419,146056005,543102328,650695470,320155631,414056105,225583792,484423959,540930224,851064751,701985905,919607433,131068413,636105648,259068827,738418423,300139485,685847375,413612857,644569358,369651518,951503855,801203859,243721975,272625902,506806528,861664955,425967794,733124422,991511100,528931792,231107018,767668565,529260996,302416173,382398828,259620656,365098831,383459193,313027382,240920627,639796698,735510140,487142618,904825478,943934895,135423905,75518402,432784100,257935703,414450877,599985430,3381023,917460348,950171329,947909267,596837651,510524990,504597107,800833545,293890729,622406412,573759058,466067301,192795196,489723704,587267074,191682786,550797523,506777054,398176195,741544217,716700823,331948239,71018950,544180914,137195740,192739227,605199093,543770657,140029931,437940226,189080344,191204022,949467995,247715972,563398411,252922543,957778539,940585337,651511878,425928671,784787093,530787646,130686553,519330539,798340139,532602809,861530353,461859444,897978891,14277443,126355214,488821164,587676747,645705750,126964610,489743780,908172476,793608430,860656369,402774351,444892247,964244588,20363936,642177343,362841903,236370700,340585887,672094022,312476202,192202206,239169458,76972744,857543575,937694723,621927591,429735237,892290503,643602288,910729095,937450561,4190163,749458497,261829510,690940595,176011397,296913475,519757609,820273759,709115020,80456667,340381440,806230621,565405001,237808691,130190885,137294685,945916475,141389402,285718743,477011909,847813304,459233084,857856931,115147561,654875819,340666240,179748731,670535435,978292337,100590948,891670639,807785121,363239390,151466496,704437577,680876663,279520574,520239126,136112973,904597444,191127501,584367044,494759828,598837654,189214097,337651886,646169630,141771112,576229612,378759031,601142850,497032568,292253957,531307162,552557226,569620169,730633402,500351050,391147210,747906072,320656785,762580175,177249045,345633397,118699260,952329261,233700506,760748282,709313330,816693297,808819975,971496187,766527826,283630777,267692909,537692437,278132220,300010689,452266306,435940468,819822728,976574595,611500488,790252948,912998170,961862358,778178389,81215870,366951098,136481929,315093017,185939667,939622500,691580344,160465788,315102963,892932711,224275447,453149061,573995719,762151701,329123898,87227183,414000187,279856885,739634810,363687830,579184009,323007163,206871247,460647999,174810795,700644955,77313632,906527822,555332458,440834558,250309145,924561695,148971747,76639546,561994156,280170817,34418057,378377803,833721698,353288759,237374685,461643108,713362056,410162504,162477457,50884915,251583459,619766495,721585304,944546110,711732100,960237865,477894656,404349547,183098443,8610788,639527575,765078791,788467785,436995539,901209310,969746375,957425225,504432209,104662691,971506919,592930852,134563366,789756209,806202340,699636115,82306271,232998667,890688599,522738227,751343117,393540835,953300169,978349947,184560179,850292442,537735306,580690210,206959245,583281062,177085416,491593388,214810683,894604353,597099804,22210062,658491918,891329242,317904786,234179886,401553146,202763028,443521339,280659117,627244303,467047011,59707464,137029307,605006443,157367908,161773794,551659878,471740662,701297153,908529938,451214047,399136028,431172014,973218595,739447672,619991043,969735110,336517993,5224447,356546826,143812529,20374042,458837531,605560368,404002383,732298302,434805343,23337911,273581999,602855627,648709185,535183787,868787148,236871417,920257781,866912348,955891929,121653973,381850098,846698129,762246925,562824049,302810506,147415761,618495379,310919275,840880378,966515685,858653899,978877924,500591606,652403013,938818930,99255978,617033486,169601924,270449599,108364645,368456671,544937662,142875818,636150211,104290719,656436355,574736992,25163027,269921510,805721389,587746069,161451042,650202642,572458424,700398185,16550220,559224423,703104557,291533779,717002153,201029291,51949007,25146956,150723122,409788910,976894851,507148143,247414471,513295429,549235111,511003481,33818813,245625742,728834746,670596843,56626740,190579825,861894854,721595970,735280011,31236536,154724398,207429496,703647797,436460674,55885423,780966632,143645561,492997097,459022676,447534069,639587154,381683204,343940768,62393746,566536007,998467347,890223275,613166186,249979529,419858370,104146700,155693180,411587005,887343299,149615433,535239456,534830253,710012498,446495461,116139721,620321711,339455602,968058150,643315764,817724374,777418588,238540933,192249417,734821346,741607486,160790485,496297556,102982673,825857470,774878108,862662854,143942890,870471190,106297059,317698619,340585090,141631541,448551257,681561464,706099435,634371992,143180520,985167493,940183473,629516758,676823244,506549940,297856755,167633737,274911174,194321332,979470216,38373841], 52), 0)

class FoodRatings:

    def __init__(self, foods: List[str], cuisines: List[str], ratings: List[int]):
        self.cuisines2foodrating = defaultdict(list)
        self.food2cuisine = dict()
        self.food2rating = dict()
        for food, cuisine, rating in zip(foods, cuisines, ratings):
            self.cuisines2foodrating[cuisine].append((-rating, food))  # neg rating because minheap
            self.food2cuisine[food] = cuisine
            self.food2rating[food] = -rating

        for foodheap in self.cuisines2foodrating.values():
            heapq.heapify(foodheap)

    def changeRating(self, food: str, newRating: int) -> None:
        self.food2rating[food] = -newRating
        cuisine = self.food2cuisine[food]

        heapq.heappush(self.cuisines2foodrating[cuisine], (-newRating, food))
        # for i, (this_rating, this_food) in enumerate(self.cuisines2foodrating[cuisine]):
        #     if food == this_food:
        #         self.cuisines2foodrating[cuisine][i] = (-newRating, food)
        #         break
        # heapq.heapify(self.cuisines2foodrating[cuisine])

    def highestRated(self, cuisine: str) -> str:
        rating, food = self.cuisines2foodrating[cuisine][0]
        while self.food2rating[food] != rating:
            # this rating has changed lol
            heapq.heappop(self.cuisines2foodrating[cuisine])
            rating, food = self.cuisines2foodrating[cuisine][0]

        return self.cuisines2foodrating[cuisine][0][1]


if __name__ == '__main__':
    Solution().test4()

